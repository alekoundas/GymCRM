
//								//
//		Entity Framework		//
//								//

dotnet ef migrations script --project DataAccess

dotnet ef migrations add InitialMigration --project DataAccess --startup-project API

dotnet ef database update --project DataAccess --startup-project API






//					//
//		React		//
//					//

// Create vite react app
npm create vite@latest my-react-app -- --template react

// Run localy
cd my-react-app
npm install
npm run dev


// Run release
npm run build
npm run preview



//									//
//		Connection string test		//
//									//

Test connection string in powershell
PS C:\Users\psych> $conn = New-Object System.Data.SqlClient.SqlConnection
PS C:\Users\psych> $conn.ConnectionString = "Server=localhost, 1433;Initial Catalog=TVServiceDB;Persist Security Info=False;User ID=sa;Password=P@ssw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
PS C:\Users\psych> $conn.Open()
PS C:\Users\psych> $conn.Close()




//									//
//		Secrets  Explenation		//
//									//

Github secrets

SSH_PRIVATE_KEY: Your SSH private key.
SSH_HOST: Your Droplet’s IP (e.g., your-droplet-ip).
SSH_USER: root
DOMAIN: alexps.gr
RCLONE_CONFIG: rclone configuration in base64 format.
GMAIL_CLIENT_ID: Your Client ID.
GMAIL_CLIENT_SECRET: Your Client Secret.
GMAIL_REFRESH_TOKEN: Your Refresh Token.
GMAIL_USERNAME: psychoson.alex3@gmail.com.
GMAIL_FROM_EMAIL: psychoson.alex3@gmail.com.
JWT_SECRET_KEY: Existing key for JWT.






//					//
//		Rclone		//
//					//


Rclone configure for Google Drive

run command: (download rclone)
rclone config

Choose n for new remote.
Name it gdrive.
Select drive (Google Drive) as the storage type (type drive or select the number).
Leave client_id and client_secret empty (press Enter).
Choose 1 for full access scope.
Leave root_folder_id and service_account_file empty.
Choose n for no advanced config.
Choose y to auto-configure (opens a browser to authenticate).
Log in to your Google account, grant permissions, and copy the token if prompted.
Choose y to confirm.

Locate config file:
C:\Users\psych\AppData\Roaming\rclone


Run the bellow to encode rclone.conf as base64: (powershell)
[Convert]::ToBase64String([System.IO.File]::ReadAllBytes("C:\Users\<YourUsername>\AppData\Roaming\rclone\rclone.conf"))

Use result in github secret




Rclone commands:
rclone ls gdrive:/DB_Backups/Damianakos/
rclone config show
rclone version




// GMAIL

Step 1: Create a Google Cloud Project and Enable APIs
	Go to console.cloud.google.com.
	Sign in with your Google account (e.g., your-email@gmail.com).
	Click the project dropdown at the top (next to "Google Cloud").
	Click NEW PROJECT.
	
	In the popup:
		Project name: Enter a name like "GymCRM Gmail API".
		Location: Leave as "No organization" (default for personal accounts).
		Click CREATE.

	Once created, select the new project from the dropdown at the top.
	Enable the Gmail API:
		From the left menu, go to APIs & Services → Library.
		Search for "Gmail API".
		Click Gmail API.
		Click ENABLE.
		Wait for the API to enable (a few seconds).

Step 2: Configure the OAuth Consent Screen The consent screen defines how your app asks for permissions (e.g., to send emails).
	From the left menu, go to APIs & Services → OAuth consent screen.
	Click "Get started
	App Information
		Set App name
		Set User support email
	Audience
		External
	Contact Information 
		email (e.g., your-email@gmail.com)

	Click on the left, the tab of 'Data Access'
	Click Add or remove scopes
	Check the box for https://www.googleapis.com/auth/gmail.send (under Gmail API, described as "Send messages only").
	Click update


	
2. Generate Client ID and Client SecretWith the consent screen and scopes configured, create the OAuth credentials:
	Go to APIs & Services → Credentials.
	Click + Create Credentials → OAuth client ID.
		Fill in:Application type: Select Web application.
		Name: "GymCRM SMTP OAuth".
		Click +Add URI in Authorized redirect URIs section
			Add https://developers.google.com/oauthplayground  (required for the Playground).
	Click Create.
	Copy from the popup:Client ID: E.g., your-client-id.apps.googleusercontent.com.
	Client Secret: E.g., GOCSPX-abc123....

	Click Download JSON to save a backup (client_secret_*.json).
	Click OK. Revisit credentials later in the Credentials list (click the pencil icon to view).
	
	From left navigation click the audience tab
	Click +Add users
	Set email and save


3. Generate Refresh Token Using OAuth 2.0 Playground
	Open developers.google.com/oauthplayground
	Configure custom credentials:
		Click the gear icon (top right, "OAuth 2.0 configuration").
		Check checkbox for Use your own OAuth credentials.
		OAuth Client ID: Paste your Client ID.
		OAuth Client Secret: Paste your Client Secret.
		Ensure OAuth endpoints is "Google".
		Click Close.

	Select the scope:
		In "Step 1 - Select & authorize APIs," expand Gmail API v1.
		Check https://www.googleapis.com/auth/gmail.send (only this scope).
		Click Authorize APIs.

Sign in with your-email@gmail.com.
Click Allow in the permission popup.
If "This app isn't verified" appears, click Advanced → Go to GymCRM Email Service (unsafe).

Exchange for tokens:In "Step 2 - Exchange authorization code for tokens," click Exchange authorization code for tokens.
Copy the Refresh Token (e.g., 1//abc123...) from the response.
If no Refresh Token appears, uncheck "Auto-refresh the token before it expires" in the gear settings and retry.
