


dotnet ef migrations script --project DataAccess

 dotnet ef migrations add InitialMigration --project DataAccess --startup-project API

dotnet ef database update --project DataAccess --startup-project API













// Create vite react app
	npm create vite@latest my-react-app -- --template react


 cd my-react-app
  npm install
  npm run dev





  Test connection string in powershell
PS C:\Users\psych> $conn = New-Object System.Data.SqlClient.SqlConnection
PS C:\Users\psych> $conn.ConnectionString = "Server=localhost, 1433;Initial Catalog=TVServiceDB;Persist Security Info=False;User ID=sa;Password=P@ssw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
PS C:\Users\psych> $conn.Open()
PS C:\Users\psych> $conn.Close()





Github secrets

SSH_PRIVATE_KEY: Your SSH private key.
SSH_HOST: Your Droplet’s IP (e.g., your-droplet-ip).
SSH_USER: root
DOMAIN: alexps.gr
RCLONE_CONFIG: rclone configuration in base64 format.







Rclone configure for Google Drive

run command:
rclone config

Choose n for new remote.
Name it gdrive.
Select drive (Google Drive) as the storage type (type drive or select the number).
Leave client_id and client_secret empty (press Enter).
Choose 1 for full access scope.
Leave root_folder_id and service_account_file empty.
Choose n for no advanced config.
Choose y to auto-configure (opens a browser to authenticate).
Log in to your Google account, grant permissions, and copy the token if prompted.
Choose y to confirm.

Locate config file:
C:\Users\psych\AppData\Roaming\rclone


Encode rclone.conf as base64: (powershell)
[Convert]::ToBase64String([System.IO.File]::ReadAllBytes("C:\Users\<YourUsername>\AppData\Roaming\rclone\rclone.conf"))